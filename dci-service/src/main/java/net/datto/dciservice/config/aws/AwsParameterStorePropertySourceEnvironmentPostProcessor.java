package net.datto.dciservice.config.aws;

import net.datto.dciservice.DciServiceApplication;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.env.EnvironmentPostProcessor;
import org.springframework.core.env.ConfigurableEnvironment;
import software.amazon.awssdk.services.ssm.SsmClient;

/***
 * This EnvironmentPostProcessor is referenced in /META-INF/spring.factories and prompts Spring to load in the
 * AWS Parameter Store Property Source that we've defined.
 *
 * As part of the setup below, it's added just before the application.properties in the hierarchy of property sources.
 * This means that environment variables, etc. still take precedence over properties in Parameter Store, so instances
 * can be configured to override "global" settings.
 */
public class AwsParameterStorePropertySourceEnvironmentPostProcessor implements EnvironmentPostProcessor {
    @Override
    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {
        if (application.getMainApplicationClass().isAssignableFrom(DciServiceApplication.class)) {
            final AwsParameterStorePropertySource awsParameterStorePropertySource = new AwsParameterStorePropertySource("AWSParameterStorePropertySource",
                    SsmClient.create(),
                    environment.getProperty("spring.application.name"), environment.getProperty("platform.name"));
            environment.getPropertySources()
                    .addAfter("systemEnvironment", awsParameterStorePropertySource);
            // write the logs generated by the awsParameterStorePropertySource when the logging framework has been initialised
            application.addInitializers(applicationContext -> awsParameterStorePropertySource.writeLogs());
        }
    }

}
